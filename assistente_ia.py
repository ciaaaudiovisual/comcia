import streamlit as st
import pandas as pd
from datetime import datetime
from database import load_data, init_supabase_client

# Esta √© a nossa "IA a custo zero". A mesma fun√ß√£o que discutimos antes.
def processar_texto_com_regras(texto: str, alunos_df: pd.DataFrame, tipos_acao_df: pd.DataFrame) -> list:
    """
    Processa um texto usando regras e palavras-chave para extrair a√ß√µes e IDs.
    """
    sugestoes = []
    sentencas = texto.split('.')
    
    nomes_alunos_map = pd.Series(alunos_df.id.values, index=alunos_df.nome_guerra).to_dict()
    
    gatilhos_acoes = {
        'Atraso na Forma√ß√£o': ['atraso', 'atrasado', 'tarde', 'apresentou-se', 'formatura'],
        'Dispensa M√©dica': ['dispensa', 'm√©dica', 'dispensado', 'atestado', 'licen√ßa', 'nas'],
        'Elogio Individual': ['elogio', 'parab√©ns', 'destacou-se', 'excelente', 'desempenho'],
        'Falta': ['falta', 'faltou', 'ausente', 'n√£o compareceu', 'aus√™ncia'],
        'Falta de Puni√ß√£o': ['puni√ß√£o', 'falta', 'n√£o cumpriu', 'advert√™ncia', 'repreens√£o'],
        'Formato de Presen√ßa': ['presen√ßa', 'instru√ß√£o', 'verifica√ß√£o', 'formatura', 'atividade'],
        'N√£o Tirou Servi√ßo': ['servi√ßo', 'n√£o tirou', 'faltou ao servi√ßo', 'escala'],
        'Puni√ß√£o de Advert√™ncia': ['advert√™ncia', 'advertido', 'repreens√£o', 'puni√ß√£o'],
        'Puni√ß√£o de Repreens√£o': ['repreens√£o', 'repreendido', 'puni√ß√£o'],
        'Servi√ßo de Dia': ['servi√ßo', 'escala', 'guarni√ß√£o', 'dia'],
        'Uniforme Incompleto': ['uniforme', 'incompleto', 'cobertura', 'coturno', 'farda']
    }

    for sentenca in sentencas:
        if not sentenca.strip():
            continue

        aluno_encontrado_id = None
        aluno_encontrado_nome = None
        acao_encontrada = None

        for nome, aluno_id in nomes_alunos_map.items():
            if nome.lower() in sentenca.lower():
                aluno_encontrado_id = aluno_id
                aluno_encontrado_nome = nome
                break
        
        if aluno_encontrado_id:
            for tipo_acao, gatilhos in gatilhos_acoes.items():
                for gatilho in gatilhos:
                    if gatilho in sentenca.lower():
                        acao_encontrada = tipo_acao
                        break
                if acao_encontrada:
                    break
        
        if aluno_encontrado_id and acao_encontrada:
            sugestao = {
                'aluno_id': str(aluno_encontrado_id),
                'nome_guerra': aluno_encontrado_nome,
                'tipo_acao': acao_encontrada,
                'descricao': sentenca.strip() + '.',
                'data': datetime.now().date()
            }
            sugestoes.append(sugestao)
            
    return sugestoes


# Fun√ß√£o principal que renderiza a p√°gina da IA
def show_assistente_ia():
    st.title("ü§ñ Assistente IA para Lan√ßamentos")
    st.caption("Descreva as ocorr√™ncias do dia em texto corrido. A IA ir√° identificar os alunos, sugerir as a√ß√µes e preparar um rascunho para seu lan√ßamento.")

    supabase = init_supabase_client()
    
    # Inicializa o estado da sess√£o para guardar as sugest√µes
    if 'sugestoes_ia' not in st.session_state:
        st.session_state.sugestoes_ia = []

    # Carrega os dados necess√°rios para a IA
    alunos_df = load_data("Alunos")
    tipos_acao_df = load_data("Tipos_Acao")
    opcoes_tipo_acao = sorted(tipos_acao_df['nome'].unique().tolist())

    # --- Interface de Entrada ---
    texto_do_dia = st.text_area("Insira o texto para an√°lise aqui:", height=200, placeholder="Ex: O aluno GIDE√ÉO chegou atrasado na formatura. Elogio o aluno PEREIRA pela sua iniciativa...")

    if st.button("Analisar Texto", type="primary"):
        if texto_do_dia:
            with st.spinner("A IA est√° a analisar o texto..."):
                sugestoes = processar_texto_com_regras(texto_do_dia, alunos_df, tipos_acao_df)
                st.session_state.sugestoes_ia = sugestoes
                if not sugestoes:
                    st.warning("Nenhuma a√ß√£o ou aluno conhecido foi identificado no texto.")
        else:
            st.warning("Por favor, insira um texto para ser analisado.")

    st.divider()

    # --- Interface de Sa√≠da (Formul√°rios de Confirma√ß√£o) ---
    if st.session_state.sugestoes_ia:
        st.subheader("Rascunhos Sugeridos para Lan√ßamento")
        st.info("Verifique e edite os dados abaixo antes de lan√ßar cada a√ß√£o individualmente.")

        # Itera sobre uma c√≥pia da lista para poder remover itens de forma segura
        for i, sugestao in enumerate(list(st.session_state.sugestoes_ia)):
            
            with st.form(key=f"form_sugestao_{i}", border=True):
                st.markdown(f"**Sugest√£o #{i+1}**")

                # Encontra o √≠ndice do tipo de a√ß√£o sugerido para pr√©-selecionar no selectbox
                try:
                    index_acao = opcoes_tipo_acao.index(sugestao['tipo_acao'])
                except ValueError:
                    index_acao = 0 # Se n√£o encontrar, seleciona o primeiro

                # --- Campos de Preenchimento Extendido ---
                aluno_nome = st.text_input("Aluno", value=sugestao['nome_guerra'], disabled=True)
                tipo_acao_selecionada = st.selectbox("Tipo de A√ß√£o", options=opcoes_tipo_acao, index=index_acao)
                data_acao = st.date_input("Data da A√ß√£o", value=sugestao['data'])
                descricao_acao = st.text_area("Descri√ß√£o", value=sugestao['descricao'], height=150)
                
                # Bot√£o de lan√ßamento dentro do formul√°rio
                if st.form_submit_button("‚úÖ Lan√ßar Esta A√ß√£o"):
                    # L√≥gica para inserir no banco de dados
                    try:
                        tipo_acao_info = tipos_acao_df[tipos_acao_df['nome'] == tipo_acao_selecionada].iloc[0]
                        
                        nova_acao = {
                            'aluno_id': sugestao['aluno_id'],
                            'tipo_acao_id': str(tipo_acao_info['id']),
                            'tipo': tipo_acao_selecionada,
                            'descricao': descricao_acao,
                            'data': data_acao.strftime('%Y-%m-%d'),
                            'usuario': st.session_state.username,
                            'status': 'Pendente'
                        }
                        supabase.table("Acoes").insert(nova_acao).execute()
                        st.success(f"A√ß√£o '{tipo_acao_selecionada}' lan√ßada para {aluno_nome}!")

                        # Remove a sugest√£o da lista e recarrega a p√°gina
                        st.session_state.sugestoes_ia.pop(i)
                        st.rerun()

                    except Exception as e:
                        st.error(f"Ocorreu um erro ao lan√ßar a a√ß√£o: {e}")
